# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dat')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dat')
    _dat = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dat', [dirname(__file__)])
        except ImportError:
            import _dat
            return _dat
        try:
            _mod = imp.load_module('_dat', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dat = swig_import_helper()
    del swig_import_helper
else:
    import _dat
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dat.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _dat.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dat.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dat.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dat.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dat.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dat.SwigPyIterator_copy(self)

    def next(self):
        return _dat.SwigPyIterator_next(self)

    def __next__(self):
        return _dat.SwigPyIterator___next__(self)

    def previous(self):
        return _dat.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dat.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dat.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dat.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dat.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dat.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dat.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dat.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _dat.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dat.new_PSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _dat.PSS_first_set
    __swig_getmethods__["first"] = _dat.PSS_first_get
    if _newclass:
        first = _swig_property(_dat.PSS_first_get, _dat.PSS_first_set)
    __swig_setmethods__["second"] = _dat.PSS_second_set
    __swig_getmethods__["second"] = _dat.PSS_second_get
    if _newclass:
        second = _swig_property(_dat.PSS_second_get, _dat.PSS_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _dat.delete_PSS
    __del__ = lambda self: None
PSS_swigregister = _dat.PSS_swigregister
PSS_swigregister(PSS)

class PIPSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PIPSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PIPSS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dat.new_PIPSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _dat.PIPSS_first_set
    __swig_getmethods__["first"] = _dat.PIPSS_first_get
    if _newclass:
        first = _swig_property(_dat.PIPSS_first_get, _dat.PIPSS_first_set)
    __swig_setmethods__["second"] = _dat.PIPSS_second_set
    __swig_getmethods__["second"] = _dat.PIPSS_second_get
    if _newclass:
        second = _swig_property(_dat.PIPSS_second_get, _dat.PIPSS_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _dat.delete_PIPSS
    __del__ = lambda self: None
PIPSS_swigregister = _dat.PIPSS_swigregister
PIPSS_swigregister(PIPSS)

class VPSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VPSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VPSS, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dat.VPSS_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dat.VPSS___nonzero__(self)

    def __bool__(self):
        return _dat.VPSS___bool__(self)

    def __len__(self):
        return _dat.VPSS___len__(self)

    def __getslice__(self, i, j):
        return _dat.VPSS___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dat.VPSS___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dat.VPSS___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dat.VPSS___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dat.VPSS___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dat.VPSS___setitem__(self, *args)

    def pop(self):
        return _dat.VPSS_pop(self)

    def append(self, x):
        return _dat.VPSS_append(self, x)

    def empty(self):
        return _dat.VPSS_empty(self)

    def size(self):
        return _dat.VPSS_size(self)

    def swap(self, v):
        return _dat.VPSS_swap(self, v)

    def begin(self):
        return _dat.VPSS_begin(self)

    def end(self):
        return _dat.VPSS_end(self)

    def rbegin(self):
        return _dat.VPSS_rbegin(self)

    def rend(self):
        return _dat.VPSS_rend(self)

    def clear(self):
        return _dat.VPSS_clear(self)

    def get_allocator(self):
        return _dat.VPSS_get_allocator(self)

    def pop_back(self):
        return _dat.VPSS_pop_back(self)

    def erase(self, *args):
        return _dat.VPSS_erase(self, *args)

    def __init__(self, *args):
        this = _dat.new_VPSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dat.VPSS_push_back(self, x)

    def front(self):
        return _dat.VPSS_front(self)

    def back(self):
        return _dat.VPSS_back(self)

    def assign(self, n, x):
        return _dat.VPSS_assign(self, n, x)

    def resize(self, *args):
        return _dat.VPSS_resize(self, *args)

    def insert(self, *args):
        return _dat.VPSS_insert(self, *args)

    def reserve(self, n):
        return _dat.VPSS_reserve(self, n)

    def capacity(self):
        return _dat.VPSS_capacity(self)
    __swig_destroy__ = _dat.delete_VPSS
    __del__ = lambda self: None
VPSS_swigregister = _dat.VPSS_swigregister
VPSS_swigregister(VPSS)

class PIVPSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PIVPSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PIVPSS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dat.new_PIVPSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _dat.PIVPSS_first_set
    __swig_getmethods__["first"] = _dat.PIVPSS_first_get
    if _newclass:
        first = _swig_property(_dat.PIVPSS_first_get, _dat.PIVPSS_first_set)
    __swig_setmethods__["second"] = _dat.PIVPSS_second_set
    __swig_getmethods__["second"] = _dat.PIVPSS_second_get
    if _newclass:
        second = _swig_property(_dat.PIVPSS_second_get, _dat.PIVPSS_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _dat.delete_PIVPSS
    __del__ = lambda self: None
PIVPSS_swigregister = _dat.PIVPSS_swigregister
PIVPSS_swigregister(PIVPSS)

class VPIPSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VPIPSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VPIPSS, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dat.VPIPSS_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dat.VPIPSS___nonzero__(self)

    def __bool__(self):
        return _dat.VPIPSS___bool__(self)

    def __len__(self):
        return _dat.VPIPSS___len__(self)

    def __getslice__(self, i, j):
        return _dat.VPIPSS___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dat.VPIPSS___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dat.VPIPSS___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dat.VPIPSS___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dat.VPIPSS___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dat.VPIPSS___setitem__(self, *args)

    def pop(self):
        return _dat.VPIPSS_pop(self)

    def append(self, x):
        return _dat.VPIPSS_append(self, x)

    def empty(self):
        return _dat.VPIPSS_empty(self)

    def size(self):
        return _dat.VPIPSS_size(self)

    def swap(self, v):
        return _dat.VPIPSS_swap(self, v)

    def begin(self):
        return _dat.VPIPSS_begin(self)

    def end(self):
        return _dat.VPIPSS_end(self)

    def rbegin(self):
        return _dat.VPIPSS_rbegin(self)

    def rend(self):
        return _dat.VPIPSS_rend(self)

    def clear(self):
        return _dat.VPIPSS_clear(self)

    def get_allocator(self):
        return _dat.VPIPSS_get_allocator(self)

    def pop_back(self):
        return _dat.VPIPSS_pop_back(self)

    def erase(self, *args):
        return _dat.VPIPSS_erase(self, *args)

    def __init__(self, *args):
        this = _dat.new_VPIPSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dat.VPIPSS_push_back(self, x)

    def front(self):
        return _dat.VPIPSS_front(self)

    def back(self):
        return _dat.VPIPSS_back(self)

    def assign(self, n, x):
        return _dat.VPIPSS_assign(self, n, x)

    def resize(self, *args):
        return _dat.VPIPSS_resize(self, *args)

    def insert(self, *args):
        return _dat.VPIPSS_insert(self, *args)

    def reserve(self, n):
        return _dat.VPIPSS_reserve(self, n)

    def capacity(self):
        return _dat.VPIPSS_capacity(self)
    __swig_destroy__ = _dat.delete_VPIPSS
    __del__ = lambda self: None
VPIPSS_swigregister = _dat.VPIPSS_swigregister
VPIPSS_swigregister(VPIPSS)

class VPIVPSS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VPIVPSS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VPIVPSS, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dat.VPIVPSS_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dat.VPIVPSS___nonzero__(self)

    def __bool__(self):
        return _dat.VPIVPSS___bool__(self)

    def __len__(self):
        return _dat.VPIVPSS___len__(self)

    def __getslice__(self, i, j):
        return _dat.VPIVPSS___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dat.VPIVPSS___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dat.VPIVPSS___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dat.VPIVPSS___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dat.VPIVPSS___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dat.VPIVPSS___setitem__(self, *args)

    def pop(self):
        return _dat.VPIVPSS_pop(self)

    def append(self, x):
        return _dat.VPIVPSS_append(self, x)

    def empty(self):
        return _dat.VPIVPSS_empty(self)

    def size(self):
        return _dat.VPIVPSS_size(self)

    def swap(self, v):
        return _dat.VPIVPSS_swap(self, v)

    def begin(self):
        return _dat.VPIVPSS_begin(self)

    def end(self):
        return _dat.VPIVPSS_end(self)

    def rbegin(self):
        return _dat.VPIVPSS_rbegin(self)

    def rend(self):
        return _dat.VPIVPSS_rend(self)

    def clear(self):
        return _dat.VPIVPSS_clear(self)

    def get_allocator(self):
        return _dat.VPIVPSS_get_allocator(self)

    def pop_back(self):
        return _dat.VPIVPSS_pop_back(self)

    def erase(self, *args):
        return _dat.VPIVPSS_erase(self, *args)

    def __init__(self, *args):
        this = _dat.new_VPIVPSS(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dat.VPIVPSS_push_back(self, x)

    def front(self):
        return _dat.VPIVPSS_front(self)

    def back(self):
        return _dat.VPIVPSS_back(self)

    def assign(self, n, x):
        return _dat.VPIVPSS_assign(self, n, x)

    def resize(self, *args):
        return _dat.VPIVPSS_resize(self, *args)

    def insert(self, *args):
        return _dat.VPIVPSS_insert(self, *args)

    def reserve(self, n):
        return _dat.VPIVPSS_reserve(self, n)

    def capacity(self):
        return _dat.VPIVPSS_capacity(self)
    __swig_destroy__ = _dat.delete_VPIVPSS
    __del__ = lambda self: None
VPIVPSS_swigregister = _dat.VPIVPSS_swigregister
VPIVPSS_swigregister(VPIVPSS)

class DoubleArrayTrie(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArrayTrie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArrayTrie, name)
    __repr__ = _swig_repr

    def build(self, *args):
        return _dat.DoubleArrayTrie_build(self, *args)

    def save(self, file_path):
        return _dat.DoubleArrayTrie_save(self, file_path)

    def open(self, file_path):
        return _dat.DoubleArrayTrie_open(self, file_path)

    def all_match(self, word):
        return _dat.DoubleArrayTrie_all_match(self, word)

    def max_match(self, word):
        return _dat.DoubleArrayTrie_max_match(self, word)

    def __init__(self):
        this = _dat.new_DoubleArrayTrie()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dat.delete_DoubleArrayTrie
    __del__ = lambda self: None
DoubleArrayTrie_swigregister = _dat.DoubleArrayTrie_swigregister
DoubleArrayTrie_swigregister(DoubleArrayTrie)

# This file is compatible with both classic and new-style classes.


